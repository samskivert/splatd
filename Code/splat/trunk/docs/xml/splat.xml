<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book xmlns:xi="http://www.w3.org/2001/XInclude">
	<bookinfo>
		<title>Splat: Scaleable Periodic LDAP Attribute Transmogrifier</title>

		<legalnotice>
			<para>
				The content of this guide is the original work of Three Rings
				Design, Inc and Landon Fuller. All rights reserved.
			</para>

			<para>
				The XML and CSS used to generate this guide is based on the work of
				Will Barton and Michael Maibaum, as contributed to the DarwinPorts
				Project under the 3 clause BSD license. Their copyright remains.
			</para>
		</legalnotice>

		<copyright>
			<year>2005</year>
			<holder>Landon Fuller and Three Rings Design, Inc.</holder>
		</copyright>
		<copyright>
			<year>2002</year>
			<year>2003</year>
			<year>2004</year>
			<holder>The OpenDarwin Project</holder>
		</copyright>
	</bookinfo>

	<preface>
		<title>About Splat</title>
		<para>
			Splat was written by Landon Fuller <email>landonf@threerings.net</email>
			and Will Barton <email>wbb4@opendarwin.org</email> for the purpose of distributing
			SSH keys from LDAP in a way that did not require modifying the SSH daemon. 
		</para>
		<para>
			In the process, we designed a generic daemon capable of pulling nearly any information from LDAP
			and using it in any way you see fit. Synchronize your LDAP directory with a relational database, 
			update an organizational chart, or build a x509 certificate revocation list. I encourage you to submit
			your local modules for inclusion with the next Splat release.
		</para>
	</preface>
	
	<chapter>
		<title>Installing and Using Splat</title>
		
		<sect1>
			<title>Installation</title>

			<sect2>
				<title>Prerequisites</title>
				<para>
					Splat depends on the following components:
				</para>
				<itemizedlist>
					<listitem>
						<ulink url="http://www.python.org">Python 2.4</ulink>
					</listitem>
					<listitem>
						<ulink url="http://twistedmatrix.com">Twisted Networking Framework</ulink>
					</listitem>
					<listitem>
						<ulink url="http://python-ldap.sourceforge.net/">Python LDAP</ulink>
					</listitem>
				</itemizedlist>
			</sect2>
		
			<sect2>
				<title>Installing with the Python Distutils</title>

				<para>
					Splat uses the standard Python distutils. To install, simply run <filename>setup.py</filename>:
					<programlisting>./setup.py install</programlisting>
				</para>
				
				<para>
				 	The Splat library will be installed in the Python site-packages directory. The <filename>splatd</filename> daemon and
				 	the <filename>splat-manage</filename> command line tool will be installed in the Python-specified bin directory. An example configuration file,
				 	<filename>splat.conf</filename>, is supplied with the source distribution.
				</para>
				<note>
					<para>
						The Splat command line tools will be installed in the bin directory as specific by Python.
						On certain operating systems, this may not be what you expect. For example, Mac OS X might install
						<filename>splat-manage</filename> and <filename>splatd</filename> in
						<filename class="directory">/Library/Python/2.3/bin</filename>. Feel free to move the binaries
						after the installation is complete.
					</para>
				</note>
			</sect2>
		</sect1>
		
		<sect1>
			<title>Configuring Splat</title>
			<sect2>
				<title>Introduction</title>
				
				<para>
					The Splat configuration file is composed of three different section types:
						<itemizedlist>
							<listitem>LDAP Configuration</listitem>
							<listitem>Service Helper Configuration</listitem>
							<listitem>Logging Configuration</listitem>
						</itemizedlist>
					The configuration uses an Apache-style syntax:
					<programlisting>
<![CDATA[<LDAP>
    # The LDAP Server configuration.
    # URI of the server(s)
    URI         ldaps://ldap1.example.com
    # The default search base for the server
    BaseDN      dc=example,dc=com
</LDAP>]]>
					</programlisting>
				</para>
			</sect2>
			
			<sect2>
				<title>LDAP Configuration</title>
				
				<para>
					The <computeroutput>LDAP</computeroutput> section defines connection parameters for your LDAP server, and may appear once
					within a Splat configuration file. If you make use of TLS, you will need to ensure that the appropriate
					settings are enabled in your system <filename>ldap.conf</filename>.
				</para>
				
				
				<sect3>
					<title>LDAP Configuration Options</title>

					<variablelist>
						<varlistentry>
							<term>URI</term>
							<listitem>URI of the LDAP server(s).</listitem>
						</varlistentry>
						<varlistentry>
							<term>BaseDN</term>
							<listitem>Default Search Base DN.</listitem>
						</varlistentry>
						<varlistentry>
							<term>BindDN</term>
							<listitem>LDAP Bind DN. If omitted, Slap will use an anonymous bind.</listitem>
						</varlistentry>
						<varlistentry>
							<term>Password</term>
							<listitem>LDAP Bind Password.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
			</sect2>
			
			<sect2>
				<title>Logging Configuration</title>
				
				<para>
					The <computeroutput>Logging</computeroutput> section configures logging for the Splat daemon. It is composed
					of any number of <computeroutput>syslog</computeroutput> or <computeroutput>logfile</computeroutput>
					subsections.
				</para>

				<sect3>
					<title>Syslog Configuration Options</title>

					<variablelist>
						<varlistentry>
							<term>Level</term>
							<listitem>Log Verbosity. One of: debug, info, warning, error, critical</listitem>
						</varlistentry>
						<varlistentry>
							<term>Facility</term>
							<listitem>Syslog Facility.</listitem>
						</varlistentry>
						<varlistentry>
							<term>Address</term>
							<listitem>Address of syslog server, or pathname to syslog socket. This varies between hosts. FreeBSD's syslog socket is located at <filename>/var/run/log</filename>.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
				
				<sect3>
					<title>Logfile Configuration Options</title>

					<variablelist>
						<varlistentry>
							<term>Level</term>
							<listitem>Log Verbosity. One of: debug, info, warning, error, critical</listitem>
						</varlistentry>
						<varlistentry>
							<term>Path</term>
							<listitem>Path to log file, or reference to Python file object such as STDOUT.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
			</sect2>
			
			<sect2>
				<title>Service Helper Configuration</title>
				
				<para>
					The <computeroutput>Service</computeroutput> section configures Splat's service helper modules. It is composed
					service-specific settings, including any number of <computeroutput>Option</computeroutput>,
					and <computeroutput>Group</computeroutput> subsections. Group and Service names (such as <emphasis>UserSSH</emphasis>
					or <emphasis>Administrators</emphasis>) must be unique within their scope, but are not interpreted by Splat in any other way.
				</para>
				
				<para>
					<computeroutput>Option</computeroutput> subsections may be specified in both the Service section and the Group subsection.
					Options are used to set and unset helper-specific settings. Module options are documented in the module-specific documentation. Example:
					<programlisting>
<![CDATA[<Option mingid>
    # Do not write keys for users with a GID less than mingid
    Value 1000
</Option> 
    
# Unset the Command option
<Option command/>
]]></programlisting>
				</para>

				<sect3>
					<title>Service Configuration Options</title>

					<variablelist>
						<varlistentry>
							<term>Helper</term>
							<listitem>Python Helper Module. Example: splat.helpers.sshPublicKeys</listitem>
						</varlistentry>
						<varlistentry>
							<term>Frequency</term>
							<listitem>Frequency at which helper is invoked. Units may be specified in hours (h), minutes (m), or seconds (s).</listitem>
						</varlistentry>
						<varlistentry>
							<term>SearchBase</term>
							<listitem>LDAP search base. If left unspecified, defaults to the BaseDN specified in the LDAP configuration section.</listitem>
						</varlistentry>
						<varlistentry>
							<term>SearchFilter</term>
							<listitem>LDAP search filter. All records that match this filter (and, optionally, are members of a permitted group) will be passed to the service helper module.</listitem>
						</varlistentry>
						<varlistentry>
							<term>RequireGroup (yes/no)</term>
							<listitem>Require that returned entries match one of the specified Groups.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
				
				<sect3>
					<title>Group Configuration Options</title>

					<variablelist>
						<varlistentry>
							<term>SearchBase</term>
							<listitem>LDAP search base. If left unspecified, defaults to the BaseDN specified in the LDAP configuration section.</listitem>
						</varlistentry>
						<varlistentry>
							<term>SearchFilter</term>
							<listitem>LDAP search filter. All records that match this filter will determine this groups membership. The filter should return groupOfUniqueNames or groupOfNames objects. I suggest using RFC2307bis to combine posixGroup and groupOfUniqueName.</listitem>
						</varlistentry>
						<varlistentry>
							<term>MemberAttribute</term>
							<listitem>LDAP attribute used to store member DNs. Defaults to uniqueMember.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
				
			</sect2>
			
			<sect2>
				<title>Example Configuration File</title>
				
				<para>
					An example configuration follows. The same configuration file is included with the distribution as <filename>splat.conf</filename>.
				</para>
				
				<programlisting>
<![CDATA[<LDAP>
    # The LDAP Server configuration.
    # URI of the server
    URI         ldaps://ldap1.example.com
    # The default search base for the server
    BaseDN      dc=example,dc=com
    
    # The distinguished name to use to bind to the LDAP directory
    # Both the BindDN and Password may be omitted, in which
    # case an anonymous bind is made.
    BindDN      cn=Manager,dc=example,dc=com
    # The password (may be in LDAP MD5/SHA1 form, generate using slappasswd)
    Password    {SSHA}0JjiKIXNxsrjzSRnFDDuJEM1wQLIMvv/
</LDAP>

<Logging>
    # Logging configuration
    <syslog>
        Level info
        Facility daemon
        Address /var/run/log
    </syslog>
    <logfile>
        # Log debug messages to stdout
        Level debug
        Path STDOUT
    </logfile>
</Logging>

<Service UserSSH>
    # The helper module
    Helper          splat.helpers.sshPublicKeys
    # The frequency at which the daemon will poll LDAP
    Frequency       10m

    # Helper-specific options. These are passed directly
    # to the helper plugin.
    <Option home>
        # Only write keys to home directories in /home
        Value /home
    </Option>
    <Option minuid>
        # Do not write keys for users with a UID less than minuid
        Value 1000
    </Option>
    <Option mingid>
        # Do not write keys for users with a GID less than mingid
        Value 1000
    </Option>

    # The base DN to use when searching for entries.
    # Defaults to the LDAP BaseDN.
    SearchBase      ou=People,dc=example,dc=com
    # The filer to use when searching for entries
    SearchFilter    (objectClass=sshAccount)

    # Group-specific options.

    # Require that entries match one of the specified groups
    RequireGroup    yes

    # Only the first matching group is used, and groups are evaluated in the
    # order specified.
    <Group Administrators>
        # The base DN to use when searching for groups
        # Defaults to the LDAP BaseDN
        SearchBase       ou=Groups,dc=example,dc=com
        # The filter to use when searching for groups
        SearchFilter     (&(objectClass=groupOfUniqueNames)(cn=administrators))
    </Group>

    <Group Developers>
        # The base DN to use when searching for groups
        # Defaults to the LDAP BaseDN
        SearchBase       ou=Groups,dc=example,dc=com
        # The filter to use when searching for groups
        SearchFilter     (&(objectClass=groupOfUniqueNames)(cn=developers))

        # Limit developers to using svn, rooted in /export/svn/repos
        <Option command>
            Value    /usr/local/bin/svnserve -t -r /export/svn/repos
        </Option>
    </Group>
</Service>

<Service MailForward>
    # The helper module
    Helper          splat.helpers.mailForwardingAddress
    # The frequency at which the daemon will poll LDAP
    Frequency       10m

    # Helper-specific options. These are passed directly
    # to the helper plugin.
    <Option home>
        # Only write keys to home directories in /home
        Value /home
    </Option>
    <Option minuid>
        # Do not write keys for users with a UID less than minuid
        Value 1000
    </Option>
    <Option mingid>
        # Do not write keys for users with a GID less than mingid
        Value 1000
    </Option>

    # The base DN to use when searching for entries.
    # Defaults to the LDAP BaseDN.
    SearchBase      ou=People,dc=example,dc=com
    # The filer to use when searching for entries
    SearchFilter    (objectClass=posixAccount)
</Service>
]]>
				</programlisting>
			</sect2>

		</sect1>
		
		<sect1>
			<title>Running Splat</title>

			<sect2>
				<title>splat-manage</title>
				<para>
					<filename>splat-manage</filename> provides some simple tools for debugging your splat configuration. You can
					specify a different bind DN, list all records that match a specified service name, or run the helper once for a specified service.
					For usage information, run <filename>splat-manage</filename> with no arguments.
				</para>
			</sect2>
		
			<sect2>
				<title>splatd</title>
				<para>
					<filename>splatd</filename> detaches from the terminal and executes your service modules according to the intervals
					specified in the configuration file. While the distribution doesn't include any startup scripts, writing one for your operating
					system should be relatively straight-forward. Feel free to submit your scripts for inclusion. For daemon usage information,
					run <filename>splatd</filename> with no arguments.
				</para>
			</sect2>
		</sect1>
		
	</chapter>
	
	<chapter>
		<title>Included Modules</title>
		
		<sect1>
			<title>Introduction</title>

			<para>
				Splat was originally written for the purpose of distributing SSH keys from LDAP in a way that did
				not require modifying the SSH daemon. 
			</para>
			<para>
				In the process, we designed a generic daemon capable of pulling nearly any information from LDAP
				and using it in any way you see fit. Synchronize your LDAP directory with a relational database, 
				update an organizational chart, or build a x509 certificate revocation list. I encourage you to submit
				your local modules for inclusion with the next Splat release.
			</para>
		</sect1>
		
		<sect1>
			<title>SSH Public Keys</title>
			
			<para>
				The SSH service module will extract SSH keys from LDAP, create a home directory if it does not
				already exist, apply any key command limitations specified by the administrator, and atomically
				overwrite the user's authorized_keys file.
			</para>
			
			<sect2>
				<title>LDAP Schema</title>

				<para>
					To store the SSH keys in LDAP, we created an sshAccount schema in our Three Rings Enterprise OID space. The
					schema is included with the Splat distribution as <filename>schema/ssh.schema</filename>. The SSH
					schema defines a new auxiliary object class, <emphasis>sshAccount</emphasis> and an optional
					attribute, <emphasis>sshPublicKey</emphasis>. Additionally, <emphasis>sshAccount</emphasis> lists
					<emphasis>uid</emphasis>, <emphasis>uidNumber</emphasis>, <emphasis>gidNumber</emphasis>,
					and <emphasis>homeDirectory</emphasis> as mandatory attributes. Feel free to use this schema with
					your own installation.
					<programlisting>
<![CDATA[attributetype ( oooSSHAttributes:1 NAME 'sshPublicKey'
        DESC 'SSH Public Key'
        EQUALITY octetStringMatch
        SYNTAX 1.3.6.1.4.1.1466.115.121.1.40 )

objectclass ( oooSSHClasses:1 NAME 'sshAccount'
        DESC 'SSH Account'
        SUP top AUXILIARY
        MUST ( uid $ uidNumber $ gidNumber $ homeDirectory )
        MAY ( sshPublicKey ) )]]>
					</programlisting>

				</para>
			</sect2>
			
			
			<sect2>
				<title>SSH Service Options</title>
				
				<para>
					The SSH service module supports <filename>authorized_keys</filename> command limitations and sanity checking
					on the uid, gid, and home directory.
				</para>
				
				<sect3>
					<title>SSH Service Options</title>

					<variablelist>
						<varlistentry>
							<term>home</term>
							<listitem>Only write keys to subdirectories of the specified directory.</listitem>
						</varlistentry>
						<varlistentry>
							<term>minuid</term>
							<listitem>Do not write keys for uids lower than minuid..</listitem>
						</varlistentry>
						<varlistentry>
							<term>mingid</term>
							<listitem>Do note write keys for gids lower than mingid.</listitem>
						</varlistentry>
						<varlistentry>
							<term>command</term>
							<listitem>Limit user to the specified command.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
				
			</sect2>
		</sect1>
		
		<sect1>
			<title>User Mail Forward Files</title>
			
			<para>
				The User Mail Forward service module was written by Kevin Van Vechten <email>kevin@opendarwin.org</email>
				of the OpenDarwin project. The module will extract the <emphasis>mailForwardingAddress</emphasis> attribute
				from LDAP, create a home directory if it does not already exist, and atomically overwrite the
				user's <filename>.forward</filename> file.
			</para>
			
			<sect2>
				<title>LDAP Schema</title>

				<para>
					The <emphasis>mailForwardingAddress</emphasis> attribute can be found in several schema definitions.
					 <itemizedlist>
					 	<listitem>As an optional attribute of the qmailUser object class as defined in the Qmail LDAP schema.</listitem>
					 	<listitem>As an optional attribute of the nsMessagingServerUser class in the Netscape LDAP schema.</listitem>
					 </itemizedlist>
				</para>
			</sect2>
			
			
			<sect2>
				<title>User Mail Forwarding Service Options</title>
				
				<para>
					The User Mail Forwarding service module supports  sanity checking on the uid, gid, and home directory.
				</para>
				
				<sect3>
					<title>SSH Service Options</title>

					<variablelist>
						<varlistentry>
							<term>home</term>
							<listitem>Only write forward files to subdirectories of the specified directory.</listitem>
						</varlistentry>
						<varlistentry>
							<term>minuid</term>
							<listitem>Do not write forward files for uids lower than minuid..</listitem>
						</varlistentry>
						<varlistentry>
							<term>mingid</term>
							<listitem>Do note write forward files for gids lower than mingid.</listitem>
						</varlistentry>
					</variablelist>
				</sect3>
				
			</sect2>			
			
		</sect1>
		
		
	</chapter>
	
	<chapter>
		<title>Writing New Modules</title>
		<para>
			This section is unfinished.
		</para>
	</chapter>
</book>
